# @Author: Massimo De Mauri <massimo>
# @Date:   2019-05-07T15:30:35+02:00
# @Email:  massimo.demauri@gmail.com
# @Filename: OSQPlackOfConvergence.jl
# @Last modified by:   massimo
# @Last modified time: 2019-12-10T23:47:43+01:00
# @License: LGPL-3.0
# @Copyright: {{copyright}}

using MAT
using OpenBB
using SparseArrays


# problem definition
Q = sparse([4, 19, 34], [4, 19, 34], [200.0, 200.0, 200.0],49,49)
L = [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
A = sparse([1, 50, 51, 52, 53, 54, 55, 56, 57, 2, 58, 59, 60, 3, 61, 4, 62, 5, 63, 64, 65, 66, 67, 6, 68, 69, 70, 71, 72, 73, 74, 75, 7, 52, 53, 54, 55, 57, 70, 76, 77, 78, 79, 8, 50, 52, 53, 54, 55, 57, 80, 81, 9, 58, 59, 10, 58, 59, 68, 82, 83, 84, 11, 63, 64, 65, 66, 67, 83, 85, 12, 63, 64, 65, 66, 67, 83, 85, 13, 63, 64, 65, 66, 67, 83, 85, 14, 63, 64, 65, 66, 67, 83, 85, 15, 63, 64, 65, 66, 67, 83, 85, 16, 50, 86, 87, 88, 89, 90, 17, 82, 91, 92, 18, 85, 19, 51, 20, 93, 94, 95, 21, 96, 97, 98, 99, 100, 22, 88, 89, 90, 97, 101, 102, 103, 104, 23, 86, 88, 89, 90, 105, 106, 24, 91, 92, 25, 91, 92, 96, 107, 108, 109, 26, 93, 94, 95, 108, 110, 27, 93, 94, 95, 108, 110, 28, 93, 94, 95, 108, 110, 29, 93, 94, 95, 108, 110, 30, 93, 94, 95, 108, 110, 31, 86, 111, 112, 113, 32, 107, 114, 115, 33, 110, 34, 87, 35, 116, 36, 117, 118, 119, 37, 113, 118, 120, 121, 122, 123, 38, 111, 113, 124, 125, 39, 114, 115, 40, 114, 115, 117, 126, 127, 128, 41, 116, 119, 127, 128, 129, 130, 42, 116, 119, 127, 128, 129, 130, 43, 116, 119, 127, 128, 129, 130, 44, 116, 119, 127, 128, 129, 130, 45, 116, 119, 127, 128, 129, 130, 46, 111, 47, 126, 48, 129, 49, 112], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49], [1.0, 1.0, -1.0, -0.387638, -0.387638, -0.385623, -0.385623, 1.0, -1.02929e-17, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -5.0, -5.0, -5.0, -5.0, -5.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -0.000138889, -0.76387, -0.76387, -0.764485, -0.764485, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 75.0, 1.0, 1.0, -83.7758, 1.0, -1.05, -1.05, -1.05, -1.05, -1.05, 1.0, 1.0, 1.0, -1.05, -1.05, -1.05, -1.05, -1.05, 1.0, 2.0, 1.0, -1.05, -1.05, -1.05, -1.05, -1.05, 1.0, 3.0, 1.0, -1.05, -1.05, -1.05, -1.05, -1.05, 1.0, 4.0, 1.0, -1.05, -1.05, -1.05, -1.05, -1.05, 1.0, 5.0, 1.0, -1.0, 1.0, -1.0, -0.387638, -0.387638, -0.385618, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -5.0, -5.0, -5.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -0.000138889, -0.76387, -0.76387, -0.764486, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 75.0, 1.0, 1.0, -83.7758, 1.0, -1.05, -1.05, -1.05, 1.0, 1.0, 1.0, -1.05, -1.05, -1.05, 1.0, 2.0, 1.0, -1.05, -1.05, -1.05, 1.0, 3.0, 1.0, -1.05, -1.05, -1.05, 1.0, 4.0, 1.0, -1.05, -1.05, -1.05, 1.0, 5.0, 1.0, -1.0, 1.0, -1.0, -0.406464, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -5.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.02137, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -0.000138889, -0.758204, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 75.0, 1.0, 1.0, -83.7758, 1.0, -1.05, -35.2422, 1.0, -82.115, 1.0, 82.115, 1.0, -1.05, -28.7791, 1.0, -67.0559, 2.0, 67.0559, 1.0, -1.05, -16.738,1.0, -38.9998, 3.0, 38.9998, 1.0, -1.05, -12.5535, 1.0, -29.2498, 4.0, 29.2498, 1.0, -1.05, -6.907, 1.0, -16.0934, 5.0, 16.0934, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, -1.0],130, 49)

l = [0.5, 1.0, 3.71382e-13, 0.5, 0.0, 0.0, -Inf, -Inf, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, -1.0, 0.0, 0.0, -Inf, -Inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, -1.0, 0.0, 0.0, -Inf, -Inf, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, -1.0, 0.0, -1.0, -Inf, -Inf, -Inf, -Inf, 0.5, -Inf, -Inf, -Inf, 1.0, 3.71382e-13, 0.5, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0.0, 1.0, -Inf, 0.0, 0.0, -1.0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0.0, 1.0, -Inf, 0.0, 0.0, -1.0, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, -Inf, 0.0, 1.0, -Inf, 0.0, -Inf]

u = [0.5, 1.0, 3.71382e-13, 0.5, Inf, Inf, Inf, Inf, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 5.0, 1.0, Inf, Inf, Inf, Inf, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 5.0, 1.0, Inf, Inf, Inf, Inf, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.8, 1.0, 5.0, 1.0, 0.0, -1.0, 3.90537, 3.90537, 3.88507, 3.88507, 0.5, 1.03699e-16, 0.0, 0.0, 1.0, 3.71382e-13, 0.5, -1.05, -1.05, -1.05, -1.05, -1.05, 75.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 25.0, 25.0, 0.0, 0.0, 59.4297, 29.7149, 0.0, 1.0, -83.7758, 0.0, 0.0, -1.0, 3.90537, 3.90537, 3.88502, 0.0, 0.0, -1.05, -1.05, -1.05, 75.0, 0.0, 0.0, 0.0, 0.0, 25.0, 25.0, 0.0, 0.0, 59.4297, 29.7149, 0.0, 1.0, -83.7758, 0.0, 0.0, -1.0, 4.12358, 0.0, 0.0, -1.05,75.0, -1.70263, 0.0, 25.0, 25.0, 3.54132, 3.54132, 59.4297, 29.7149, 0.0, 1.0, -83.7758, 0.0, 418.879]

x = [0.500114, 1.0, 1.11607e-8, 0.5, 0.21, -7.95624e-6, 7.52689e-5, -0.00672311, 1.41964e-16, 0.999999, 5.05544e-7, 1.95583e-7, 1.73592e-8, -6.42588e-8, -8.98225e-8, 0.500175, 0.999999, 2.41433e-7, 0.499892, 0.209997, -0.000130585, 0.000760402, 0.00118903, -3.89411e-11, 0.999923, 6.91306e-5, 2.6745e-5, 2.37378e-6, -8.78706e-6, -1.22828e-5, 0.500162, 0.999903, 3.30147e-5, 0.499739, 0.195701, 1.8718, 0.456112, 0.135668, 0.0258263, 0.0, 0.0514111, 0.00046049, 7.8846e-5, -0.000712081, -0.00202361, 0.50014, 0.950784, 0.0395797, 0.499844]

y = [99.9639, 0.0272168, -0.00617923, -50.0001, -4.87981e-18, -0.056103, 0.0, 0.0, -0.35, 4.53561, -0.103222, -0.0909822, -0.0787419, -0.0665016, -0.0542614, 0.0, 0.0544828, -0.0122403, 0.0, 3.5582e-18, -0.0277961, 0.0, 0.0, -0.583333, 1.50546, -0.07647, -0.0744779, -0.0724858, -0.0704937, -0.0685015, 2.18575e-18, 0.0176781, -0.00199212, 0.0, 0.0, 0.0, 0.0, 0.0, -0.67363, 7.96787e-16, -2.05433e-18, -0.043473, -0.130581, -0.160414, -0.200898, 0.0, -9.1073e-19,0.0, 0.0, -99.9489, 99.9789, 0.0, 0.0, 0.0, 0.0, 99.9639, 0.014947, 0.349796, 0.350204, -0.0276249, 0.00617927, -50.0001, 0.199282, 0.000701001, 1.64131e-5, 2.64292e-7, 2.70577e-7, 0.0601515, 0.0157885, 0.026357, 0.00106621, 0.00124415, 0.00124535, 0.00147438, 0.00148989, 0.0, 0.0, 0.029746, 0.0177624, 0.0, 0.0, 0.127306, 0.325463, 0.11339, -0.0122403, -0.000118213, 99.9487, 0.0, 0.0, 0.0, 0.196922, 0.269745, 0.199686, 0.000308741, 5.79471e-6, 0.0128791, 0.0160644, 0.0278924, 0.00153069, 0.00155834, 0.0, 0.0, 0.0234275, 0.007591, 0.0, 0.0, 0.393216, 0.288463, 0.0367677, -0.00199212, -7.05811e-6, 1.38921e-6, 0.0, 0.0, 0.375955, 0.199693, 0.0, -1.7486e-17, 0.00353974, 0.0, 0.0, 0.0,0.0, 0.0, 0.0, 0.000229697, 0.464172, 0.00149133, -0.000654851, 0.0]

println("solving with QPALM")
using QPALM
model = QPALM.Model()
QPALM.setup!(model;Q=Q,q=L,A=A,bmin=l,bmax=u,eps_abs=2e-3,eps_rel=2e-3,max_iter=10000,verbose=false)
QPALM.warm_start!(model,x_warm_start=x,y_warm_start=y)
sol = QPALM.solve!(model)
println(" - status: ",sol.info.status," # iterations: ",sol.info.iter)
println(" - primal: ",sol.x)


println("solving with OSQP")
using OSQP
model = OSQP.Model()
OSQP.setup!(model;P=Q,q=L,A=A,l=l,u=u,eps_abs=2e-3,eps_rel=2e-3,max_iter=10000,verbose=false)
OSQP.warm_start!(model,x=x,y=y)
sol = OSQP.solve!(model)
println(" - status: ",sol.info.status," # iterations: ",sol.info.iter,"\n")
println(" - primal: ",sol.x)
